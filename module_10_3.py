'''
Задача "Банковские операции":
Необходимо создать класс Bank со следующими свойствами:

Атрибуты объекта:
balance - баланс банка (int)
lock - объект класса Lock для блокировки потоков.

Методы объекта:
Метод deposit:
Будет совершать 100 транзакций пополнения средств.
Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
Метод take:
Будет совершать 100 транзакций снятия.
Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
В начале должно выводится сообщение "Запрос на <случайное число>".
Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие,
уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".

Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств"
и заблокировать поток методом acquiere.
Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.
После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".

По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий,
когда происходит попытка снятия при недостаточном балансе.
'''


from threading import Thread, Lock
from random import randint
from time import sleep



class Bank:
    def __init__(self):
        self.balance = 0
        self.lock = Lock()

    def deposit(self):
        for _ in range(100):
            amount = randint(50, 500)
            self.balance += amount
            if self.balance >= 500 and self.lock.locked():
                self.lock.release()
            print(f"Пополнение: {amount}. Баланс: {self.balance}")
            sleep(0.001)

    def take(self):
        for _ in range(100):
            amount = randint(50, 500)
            print(f"Запрос на {amount}. Доступно {self.balance}")
            if amount > self.balance:
                self.lock.acquire()
                print("Запрос отклонён, недостаточно средств")
            else:

                self.balance -= amount
                print(f"Снятие: {amount}. Баланс: {self.balance}")

            sleep(0.001)

    def __str__(self):
        return f"Текущий баланс: {self.balance}"



bank = Bank()
print(bank)
deposit_thread = Thread(target=bank.deposit)
take_thread = Thread(target=bank.take)
deposit_thread.start()
take_thread.start()
deposit_thread.join()
take_thread.join()
print(f"Итоговый баланс: {bank.balance}")
